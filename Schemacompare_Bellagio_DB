/*
Deployment script for SchemaCompare

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "tomer"
:setvar DefaultFilePrefix "SchemaCompare"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQL2019\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQL2019\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END
Go


if exists (select 1 from sys.databases
	where name = '[$(DatabaseName)]')
begin
	alter database [$(DatabaseName)] set single_user with rollback immediate
	drop database [$(DatabaseName)]
end
GO

create database [$(DatabaseName)]

GO

USE [$(DatabaseName)]
GO



GO
USE [$(DatabaseName)];


GO
PRINT N'Creating Schema [HISTORY]...';


GO
IF NOT EXISTS (SELECT 0
               FROM information_schema.schemata 
               WHERE schema_name='HISTORY')
BEGIN
  EXEC sp_executesql N'CREATE SCHEMA HISTORY';
END
GO


GO
PRINT N'Creating Table [HISTORY].[User_Details]...';


GO
CREATE TABLE [HISTORY].[User_Details] (
    [UserID]        INT            NOT NULL,
    [User Name]     NVARCHAR (10)  NOT NULL,
    [Password]      NVARCHAR (10)  NOT NULL,
    [First Name]    NVARCHAR (20)  NOT NULL,
    [Last Name]     NVARCHAR (20)  NOT NULL,
    [Address]       NVARCHAR (100) NULL,
    [Country]       NVARCHAR (50)  NOT NULL,
    [E-Mail]        NVARCHAR (100) NOT NULL,
    [Gender]        NVARCHAR (6)   NOT NULL,
    [Birth Date]    DATE           NOT NULL,
    [Login Counter] INT            NOT NULL,
    [Login]         NVARCHAR (5)   NOT NULL,
    [BankRoll]      MONEY          NOT NULL,
    [start_date]    DATETIME2 (7)  NOT NULL,
    [end_date]      DATETIME2 (7)  NOT NULL
);


GO
PRINT N'Creating Index [HISTORY].[User_Details].[ix_User_Details]...';


GO
CREATE CLUSTERED INDEX [ix_User_Details]
    ON [HISTORY].[User_Details]([end_date] ASC, [start_date] ASC) WITH (DATA_COMPRESSION = PAGE);


GO
PRINT N'Creating Table [HISTORY].[GameRound]...';


GO
CREATE TABLE [HISTORY].[GameRound] (
    [RoundNumber] INT           NOT NULL,
    [UserID]      INT           NULL,
    [GameType]    NVARCHAR (10) NULL,
    [BetAmount]   MONEY         NULL,
    [WinOrLose]   NVARCHAR (5)  NULL,
    [Date]        DATETIME      NULL,
    [start_date]  DATETIME2 (7) NOT NULL,
    [end_date]    DATETIME2 (7) NOT NULL
);


GO
PRINT N'Creating Index [HISTORY].[GameRound].[ix_GameRound]...';


GO
CREATE CLUSTERED INDEX [ix_GameRound]
    ON [HISTORY].[GameRound]([end_date] ASC, [start_date] ASC) WITH (DATA_COMPRESSION = PAGE);


GO
PRINT N'Creating Table [dbo].[BankRoll_Trans]...';


GO
CREATE TABLE [dbo].[BankRoll_Trans] (
    [UserID]          INT           NOT NULL,
    [TransactionNum]  INT           IDENTITY (1, 1) NOT NULL,
    [TransactionType] NVARCHAR (10) NULL,
    [Date]            DATETIME      NOT NULL,
    [Amount]          MONEY         NOT NULL,
    PRIMARY KEY CLUSTERED ([TransactionNum] ASC)
);


GO
PRINT N'Creating Table [dbo].[Country]...';


GO
CREATE TABLE [dbo].[Country] (
    [Country Name] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Country Name] ASC)
);


GO
PRINT N'Creating Table [dbo].[GameRound]...';


GO
CREATE TABLE [dbo].[GameRound] (
    [RoundNumber] INT                                         IDENTITY (1, 1) NOT NULL,
    [UserID]      INT                                         NULL,
    [GameType]    NVARCHAR (10)                               NULL,
    [BetAmount]   MONEY                                       NULL,
    [WinOrLose]   NVARCHAR (5)                                NULL,
    [Date]        DATETIME                                    NULL,
    [start_date]  DATETIME2 (7) GENERATED ALWAYS AS ROW START NOT NULL,
    [end_date]    DATETIME2 (7) GENERATED ALWAYS AS ROW END   NOT NULL,
    PRIMARY KEY CLUSTERED ([RoundNumber] ASC),
    PERIOD FOR SYSTEM_TIME ([start_date], [end_date])
)
WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE=[HISTORY].[GameRound], DATA_CONSISTENCY_CHECK=ON));


GO
PRINT N'Creating Table [dbo].[Gender]...';


GO
CREATE TABLE [dbo].[Gender] (
    [Gender] NVARCHAR (6) NOT NULL,
    PRIMARY KEY CLUSTERED ([Gender] ASC)
);


GO
PRINT N'Creating Table [dbo].[SlotMachin_Symbols]...';


GO
CREATE TABLE [dbo].[SlotMachin_Symbols] (
    [SymbolID]   INT          NOT NULL,
    [SymbolChar] NVARCHAR (1) NOT NULL,
    PRIMARY KEY CLUSTERED ([SymbolID] ASC),
    UNIQUE NONCLUSTERED ([SymbolChar] ASC)
);


GO
PRINT N'Creating Table [dbo].[Transaction_Type]...';


GO
CREATE TABLE [dbo].[Transaction_Type] (
    [TransactionType] NVARCHAR (10) NOT NULL,
    PRIMARY KEY CLUSTERED ([TransactionType] ASC)
);


GO
PRINT N'Creating Table [dbo].[User_Details]...';


GO
CREATE TABLE [dbo].[User_Details] (
    [UserID]        INT                                         IDENTITY (1, 1) NOT NULL,
    [User Name]     NVARCHAR (10)                               NOT NULL,
    [Password]      NVARCHAR (10)                               NOT NULL,
    [First Name]    NVARCHAR (20)                               NOT NULL,
    [Last Name]     NVARCHAR (20)                               NOT NULL,
    [Address]       NVARCHAR (100)                              NULL,
    [Country]       NVARCHAR (50)                               NOT NULL,
    [E-Mail]        NVARCHAR (100)                              NOT NULL,
    [Gender]        NVARCHAR (6)                                NOT NULL,
    [Birth Date]    DATE                                        NOT NULL,
    [Login Counter] INT                                         NOT NULL,
    [Login]         NVARCHAR (5)                                NOT NULL,
    [BankRoll]      MONEY                                       NOT NULL,
    [start_date]    DATETIME2 (7) GENERATED ALWAYS AS ROW START NOT NULL,
    [end_date]      DATETIME2 (7) GENERATED ALWAYS AS ROW END   NOT NULL,
    PRIMARY KEY CLUSTERED ([UserID] ASC),
    UNIQUE NONCLUSTERED ([User Name] ASC),
    PERIOD FOR SYSTEM_TIME ([start_date], [end_date])
)
WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE=[HISTORY].[User_Details], DATA_CONSISTENCY_CHECK=ON));


GO
PRINT N'Creating Default Constraint [dbo].[DF_SysStart2]...';


GO
ALTER TABLE [dbo].[GameRound]
    ADD CONSTRAINT [DF_SysStart2] DEFAULT (sysutcdatetime()) FOR [start_date];


GO
PRINT N'Creating Default Constraint [dbo].[DF_SysEnd2]...';


GO
ALTER TABLE [dbo].[GameRound]
    ADD CONSTRAINT [DF_SysEnd2] DEFAULT (CONVERT([datetime2],'9999-12-31 23:59:59.9999999')) FOR [end_date];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[User_Details]...';


GO
ALTER TABLE [dbo].[User_Details]
    ADD DEFAULT ('-') FOR [Address];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[User_Details]...';


GO
ALTER TABLE [dbo].[User_Details]
    ADD DEFAULT ((0)) FOR [Login Counter];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[User_Details]...';


GO
ALTER TABLE [dbo].[User_Details]
    ADD DEFAULT ('NO') FOR [Login];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[User_Details]...';


GO
ALTER TABLE [dbo].[User_Details]
    ADD DEFAULT ((0)) FOR [BankRoll];


GO
PRINT N'Creating Default Constraint [dbo].[DF_SysStart]...';


GO
ALTER TABLE [dbo].[User_Details]
    ADD CONSTRAINT [DF_SysStart] DEFAULT (sysutcdatetime()) FOR [start_date];


GO
PRINT N'Creating Default Constraint [dbo].[DF_SysEnd]...';


GO
ALTER TABLE [dbo].[User_Details]
    ADD CONSTRAINT [DF_SysEnd] DEFAULT (CONVERT([datetime2],'9999-12-31 23:59:59.9999999')) FOR [end_date];


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[BankRoll_Trans]...';


GO
ALTER TABLE [dbo].[BankRoll_Trans] WITH NOCHECK
    ADD FOREIGN KEY ([UserID]) REFERENCES [dbo].[User_Details] ([UserID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[BankRoll_Trans]...';


GO
ALTER TABLE [dbo].[BankRoll_Trans] WITH NOCHECK
    ADD FOREIGN KEY ([TransactionType]) REFERENCES [dbo].[Transaction_Type] ([TransactionType]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[GameRound]...';


GO
ALTER TABLE [dbo].[GameRound] WITH NOCHECK
    ADD FOREIGN KEY ([UserID]) REFERENCES [dbo].[User_Details] ([UserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Country]...';


GO
ALTER TABLE [dbo].[User_Details] WITH NOCHECK
    ADD CONSTRAINT [FK_Country] FOREIGN KEY ([Country]) REFERENCES [dbo].[Country] ([Country Name]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Gender]...';


GO
ALTER TABLE [dbo].[User_Details] WITH NOCHECK
    ADD CONSTRAINT [FK_Gender] FOREIGN KEY ([Gender]) REFERENCES [dbo].[Gender] ([Gender]);


GO
PRINT N'Creating Trigger [dbo].[Bankroll_Insert]...';
GO
---Trigger for BankRoll--

CREATE TRIGGER Bankroll_Insert
ON BankRoll_Trans
FOR INSERT
AS
BEGIN
UPDATE User_Details
SET BankRoll = (U.bankroll + I.Amount)
FROM User_Details AS U INNER JOIN Inserted AS I
ON U.UserID = I.UserID
where I.TransactionNum= TransactionNum
END
GO
PRINT N'Creating View [dbo].[UVW_Game_Statistics_Report]...';


GO

-- 3) Game Statistics Report--
CREATE VIEW UVW_Game_Statistics_Report AS
SELECT CS.Date, CS.[Number of Rounds], CS.[Number of Winning], CS.[Total Bet Amount], ISNULL(CS.[Total Winning Amount],0) AS 'Total Winning Amount'
FROM
(SELECT CONVERT(NVARCHAR,Date,103) AS Date , COUNT(RoundNumber) AS 'Number of Rounds', COUNT(WinOrLose) 'Number of Winning', SUM(BetAmount) 'Total Bet Amount',
(SELECT SUM(Amount) FROM BankRoll_Trans WHERE TransactionType = 'Win') 'Total Winning Amount'
FROM GameRound
WHERE Date BETWEEN GETDATE()-7 AND GETDATE()
GROUP BY CONVERT(NVARCHAR,Date,103)) CS
GO
PRINT N'Creating View [dbo].[vv_getRANDValue]...';


GO

---- RAND NAMBER -----------------------------------------------------------------------------------------------------------

create view [dbo].[vv_getRANDValue]
as
select rand() as value
GO
PRINT N'Creating Function [dbo].[fn_RandomNum]...';


GO

Create function [dbo].[fn_RandomNum](@Lower int, @Upper int)
returns int
as
Begin
DECLARE @Random INT;
if @Upper > @Lower
	SELECT @Random = (@Upper - @Lower) * (SELECT Value FROM vv_getRANDValue) + @Lower
Else
	SELECT @Random = (@Lower - @Upper) * (SELECT Value FROM vv_getRANDValue) + @Upper
return @Random
end
GO
PRINT N'Creating Function [dbo].[GeneratePassword]...';


GO

--STRONG PASSWORD  
CREATE FUNCTION [dbo].[GeneratePassword] ()
RETURNS varchar(6)
AS
BEGIN
  DECLARE @randInt int;
  DECLARE @NewCharacter varchar(1); 
  DECLARE @NewPassword varchar(6); 
  SET @NewPassword='';

  --6 random characters
  WHILE (LEN(@NewPassword) <3)
  BEGIN
    select @randInt=[dbo].[fn_RandomNum](48,122)
	--      0-9           < = > ? @ A-Z [ \ ]                   a-z      
    IF @randInt<=57 OR (@randInt>=60 AND @randInt<=93) OR (@randInt>=97 AND @randInt<=122)
    Begin
      select @NewCharacter=CHAR(@randInt)
      select @NewPassword=CONCAT(@NewPassword, @NewCharacter)
    END
  END

  --Ensure a lowercase
  select @NewCharacter=CHAR([dbo].[fn_RandomNum](97,122))
  select @NewPassword=CONCAT(@NewPassword, @NewCharacter)
  
  --Ensure an upper case
  select @NewCharacter=CHAR([dbo].[fn_RandomNum](65,90))
  select @NewPassword=CONCAT(@NewPassword, @NewCharacter)
  
  --Ensure a number
  select @NewCharacter=CHAR([dbo].[fn_RandomNum](48,57))
  select @NewPassword=CONCAT(@NewPassword, @NewCharacter)
  
  --Ensure a symbol
  WHILE (LEN(@NewPassword) <6)
  BEGIN
    select @randInt=[dbo].[fn_RandomNum](33,64)
	--           !               # $ % &                            < = > ? @
    IF @randInt=33 OR (@randInt>=35 AND @randInt<=38) OR (@randInt>=60 AND @randInt<=64) 
    Begin
     select @NewCharacter=CHAR(@randInt)
     select @NewPassword=CONCAT(@NewPassword, @NewCharacter)
    END
  END
  RETURN(@NewPassword);
END;
GO
PRINT N'Creating Function [dbo].[Bankroll_Transactions_Report]...';


GO


-- 2) Bankyoll Transaction
CREATE FUNCTION DBO.Bankroll_Transactions_Report(@UserName NVARCHAR(20), @BeginDate NVARCHAR(20), @EndDate NVARCHAR(20))
RETURNS TABLE
RETURN  
SELECT TransactionOfUser, BRT.TransactionNum, BRT.TransactionType, CONVERT(NVARCHAR,DATE,103) Date, BRT.Amount, SUM(BRT.Amount) OVER (PARTITION BY BRT.UserID ORDER BY BRT.TransactionNum) 'BankRoll'
FROM
(SELECT BRT.UserID ,BRT.TransactionNum, BRT.TransactionType, BRT.DATE, BRT.Amount, ROW_NUMBER() OVER (PARTITION BY BRT.UserID ORDER BY BRT.UserID) AS 'TransactionOfUser'
FROM BankRoll_Trans BRT join User_Details UN
ON BRT.UserID = UN.UserID
WHERE UN.[User Name] = @UserName AND CONVERT(NVARCHAR,DATE,103) BETWEEN @BeginDate AND @EndDate) BRT
GO
PRINT N'Creating Function [dbo].[Game_History_Report]...';


GO

--Reports-------------------------------------------------------------------------------------------------------------------------

-- 1) Game history Report--
CREATE FUNCTION DBO.Game_History_Report(@UserName NVARCHAR(20))
RETURNS @TABLE TABLE (GameType NVARCHAR(10),RoundNumber int, BetAmount MONEY,WinOrLose NVARCHAR(5), Date DATETIME)
AS
BEGIN
INSERT INTO @TABLE (GameType, RoundNumber, BetAmount, WinOrLose, Date)
SELECT GR.GameType, ROW_NUMBER() OVER (PARTITION BY GR.UserID ORDER BY GR.Date DESC) RoundNumber, GR.BetAmount, GR.WinOrLose, GR.Date
FROM GameRound GR JOIN User_Details UN
ON GR.UserID=UN.UserID
WHERE UN.[User Name] = @UserName
ORDER BY GR.Date DESC
RETURN
END
GO
PRINT N'Creating Procedure [dbo].[USP_Chashier]...';


GO


--- Chashier--
CREATE   PROCEDURE USP_Chashier
(
@UserID int, 
@Amount money, 
@TransactionType Nvarchar(10),
@Answer NVARCHAR(100) output
)
AS
IF @TransactionType='Cashout'
	IF @Amount>(SELECT BankRoll FROM User_Details WHERE @UserID=UserID)
	BEGIN
	set @Answer = 'The amount you have is less than the amount you want to Cashout. Please Try Again.'
	RETURN
	END
IF @TransactionType='Cashout'
	begin
	INSERT INTO BankRoll_Trans (UserID , TransactionType, Date, Amount)
	VALUES (@UserID, @TransactionType , GETDATE(), @Amount*(-1))
	set @Answer = 'Cashout succesfully'
	end	
IF @TransactionType='Deposit'
	begin
	INSERT INTO BankRoll_Trans (UserID , TransactionType, Date, Amount)
	VALUES (@UserID, @TransactionType , GETDATE(), @Amount)
	set @Answer = 'Deposit succesfully'
	END
GO
PRINT N'Creating Procedure [dbo].[USP_GameSM]...';


GO
CREATE   PROCEDURE USP_GameSM
(
@UserId INT,
@BetAmount INT,
@Answer nvarchar(100) output
)
AS
IF @BetAmount>(SELECT BankRoll FROM User_Details WHERE UserID=@UserId)
	BEGIN 
	set @Answer = 'You can only bet on amount of money you have in your bankroll. please go to the Cachier or reduce your bet amount'
	RETURN
	END
ELSE
	BEGIN
	DECLARE @Symbol1 NVARCHAR(5), @Symbol2 NVARCHAR(5), @Symbol3 NVARCHAR(5), @WinOrLose NVARCHAR(10)
	SET @Symbol1=(SELECT TOP 1 SymbolChar FROM SlotMachin_Symbols ORDER BY NEWID())
	SET @Symbol2=(SELECT TOP 1 SymbolChar FROM SlotMachin_Symbols ORDER BY NEWID())
	SET @Symbol3=(SElECT TOP 1 SymbolChar FROM SlotMachin_Symbols ORDER BY NEWID())
	IF (@Symbol1=@Symbol2) and (@Symbol2=@Symbol3)
		BEGIN
		set @Answer = 'you won! '+CONVERT(CHAR(10),@BetAmount)+'$!'
		SET @WinOrLose='Win'
		INSERT INTO BankRoll_Trans (UserId, TransactionType, DATE, Amount)
		VALUES (@UserId, @WinOrLose, GETDATE(), @BetAmount)
		END
	ELSE
		BEGIN
		set @Answer = 'Sorry, you lose this time. you can try your luck again..'
		SET @WinOrLose='Lose'
		INSERT INTO BankRoll_Trans (UserId, TransactionType, DATE, Amount)
		VALUES (@UserId, @WinOrLose, GETDATE(), @BetAmount*(-1))
		END
	END
INSERT INTO GameRound (UserID, GameType, BetAmount, WinOrLose, Date)
VALUES (@UserId,'SlotMachin',@BetAmount, @WinOrLose, GETDATE())
GO
PRINT N'Creating Procedure [dbo].[USP_HorseRace]...';


GO
create   proc USP_HorseRace
(
@UserId INT,
@BetAmount INT,
@Bet_Horse INT,
@Answer nvarchar(100) output
)
as

DECLARE
	@Horse1Position				as tinyint		= 0 ,
	@Horse2Position				as tinyint		= 0 ,
	@Horse3Position				as tinyint		= 0 ,
	@Horse4Position				as tinyint		= 0 ,
	@Horse5Position				as tinyint		= 0 ,
	@MaxHorsePosition			as tinyint		= 0 ,
	@MaxTrackPosition			as tinyint		= 20,
	@MaxStepsPerIteration		as tinyint		= 6 ,
	@Winner						as tinyint ,
	@LineToPrint				as nvarchar(max) ,
	@WinOrLose NVARCHAR(10);

WHILE
	1 = 1
BEGIN

	SET @LineToPrint = REPLICATE (N'.' , @Horse1Position) + N'1' + 
	REPLICATE (N'.' , @MaxTrackPosition - @Horse1Position);
	RAISERROR (@LineToPrint , 0 , 1) WITH NOWAIT

	SET @LineToPrint = REPLICATE (N'.' , @Horse2Position) + N'2' + 
	REPLICATE (N'.' , @MaxTrackPosition - @Horse2Position);
	RAISERROR (@LineToPrint , 0 , 1) WITH NOWAIT

	SET @LineToPrint = REPLICATE (N'.' , @Horse3Position) + N'3' + 
	REPLICATE (N'.' , @MaxTrackPosition - @Horse3Position);
	RAISERROR (@LineToPrint , 0 , 1) WITH NOWAIT

	SET @LineToPrint = REPLICATE (N'.' , @Horse4Position) + N'4' + 
	REPLICATE (N'.' , @MaxTrackPosition - @Horse4Position);
	RAISERROR (@LineToPrint , 0 , 1) WITH NOWAIT

	SET @LineToPrint = REPLICATE (N'.' , @Horse5Position) + N'5' + 
	REPLICATE (N'.' , @MaxTrackPosition - @Horse5Position);
	RAISERROR (@LineToPrint , 0 , 1) WITH NOWAIT

	RAISERROR (N'' , 0 , 1) WITH NOWAIT;

	IF
		@MaxHorsePosition = @MaxTrackPosition
	BEGIN
	
		BREAK;

	END;

	SET @Horse1Position += CAST ((RAND () * (@MaxStepsPerIteration + 1)) as tinyint) %
		(@MaxStepsPerIteration + 1);

	IF
		@Horse1Position > @MaxTrackPosition
	BEGIN
		SET @Horse1Position = @MaxTrackPosition
	END;

	IF
		@Horse1Position > @MaxHorsePosition
	BEGIN
		SET @MaxHorsePosition = @Horse1Position
		SET @Winner = 1;
	END;

	SET @Horse2Position += CAST ((RAND () * (@MaxStepsPerIteration + 1)) as tinyint) %
		(@MaxStepsPerIteration + 1);

	IF
		@Horse2Position > @MaxTrackPosition
	BEGIN
		SET @Horse2Position = @MaxTrackPosition
	END;

	IF
		@Horse2Position > @MaxHorsePosition
	BEGIN
		SET @MaxHorsePosition = @Horse2Position
		SET @Winner = 2;
	END;

		SET @Horse3Position += CAST ((RAND () * (@MaxStepsPerIteration + 1)) as tinyint) %
		(@MaxStepsPerIteration + 1);

	IF
		@Horse3Position > @MaxTrackPosition
	BEGIN
		SET @Horse3Position = @MaxTrackPosition
	END;

	IF
		@Horse3Position > @MaxHorsePosition
	BEGIN
		SET @MaxHorsePosition = @Horse3Position
		SET @Winner = 3;
	END;

		SET @Horse4Position += CAST ((RAND () * (@MaxStepsPerIteration + 1)) as tinyint) %
		(@MaxStepsPerIteration + 1);

	IF
		@Horse4Position > @MaxTrackPosition
	BEGIN
		SET @Horse4Position = @MaxTrackPosition
	END;

	IF
		@Horse4Position > @MaxHorsePosition
	BEGIN
		SET @MaxHorsePosition = @Horse4Position
		SET @Winner = 4;
	END;

		SET @Horse5Position += CAST ((RAND () * (@MaxStepsPerIteration + 1)) as tinyint) %
		(@MaxStepsPerIteration + 1);

	IF
		@Horse5Position > @MaxTrackPosition
	BEGIN
		SET @Horse5Position = @MaxTrackPosition
	END;

	IF
		@Horse5Position > @MaxHorsePosition
	BEGIN
		SET @MaxHorsePosition = @Horse5Position
		SET @Winner = 5;
	END;
	
	WAITFOR DELAY '00:00:01'

END;
begin
	SET @LineToPrint = N'The winner is horse #' + CAST (@Winner as nvarchar(MAX)) + N'!';
	set @Answer = @LineToPrint
end
IF @Winner = @Bet_Horse
		BEGIN
		set @Answer = 'you won! '+CONVERT(CHAR(10),@BetAmount)+'$!'
		SET @WinOrLose='Win'
		INSERT INTO BankRoll_Trans (UserId, TransactionType, DATE, Amount)
		VALUES (@UserId, @WinOrLose, GETDATE(), @BetAmount)
		END
	ELSE
		BEGIN
		set @Answer = 'Sorry, you lose this time. you can try your luck again..'
		SET @WinOrLose='Lose'
		INSERT INTO BankRoll_Trans (UserId, TransactionType, DATE, Amount)
		VALUES (@UserId, @WinOrLose, GETDATE(), @BetAmount*(-1))
		END
GO
PRINT N'Creating Procedure [dbo].[USP_LogIn]...';


GO
CREATE   PROCEDURE [dbo].[USP_LogIn]
(
@UserName NVARCHAR(10),
@Password NVARCHAR(10),
@Answer NVARCHAR(40) output,
@Money NVARCHAR(40) output,
@id int output
)
AS
IF EXISTS (SELECT [User Name],Password FROM User_Details WHERE [User Name]=@UserName AND Password=@Password)
BEGIN
	IF (SELECT [Login] FROM User_Details WHERE [User Name]=@UserName)='YES'
		BEGIN 
		set @Answer = 'You are already loged in'
		RETURN
		END
	ELSE
		BEGIN
		set @Answer = 'You Loged in secssecfuly'
		set @id = (SELECT [UserID] from User_Details WHERE [User Name]=@Username and [Password]=@Password) 
		DECLARE @Bankroll money =(SELECT bankroll from User_Details WHERE [User Name]=@Username)
		print @id
		set @Money = 'Your bank roll is '+ CONVERT(NVARCHAR,@Bankroll)
		UPDATE User_Details SET [Login] = 'YES' where [User Name]=@UserName
		UPDATE User_Details SET[Login counter] = 0 where [User Name]=@UserName
		RETURN
		END
RETURN
END
ELSE
	IF (SELECT [Login counter] FROM User_Details WHERE [User Name]=@UserName)<5
	BEGIN 
	set @Answer = 'User or password is incorect'
	UPDATE User_Details SET [Login counter] = [Login counter]+1 where [User Name]=@UserName
	RETURN
	END
	ELSE	
	if not EXISTS (select [User Name] from [dbo].[User_Details] where [User Name]=@UserName)
	set @Answer = 'User not exists'
	else
	set @Answer = 'You are blocked, please call the support'
GO
PRINT N'Creating Procedure [dbo].[USP_Logoff]...';


GO
CREATE   PROCEDURE USP_Logoff
(
@UserID int
)
As
begin
IF EXISTS (SELECT [UserID] FROM User_Details WHERE [UserID]=@UserID)
	BEGIN
	UPDATE [dbo].[User_Details]
	set Login = 'NO'
	WHERE [UserID]=@UserID
	end
END
GO
PRINT N'Creating Procedure [dbo].[USP_Regisration]...';


GO
CREATE   PROCEDURE USP_Regisration
(
@UserName NVARCHAR(10),
@Password NVARCHAR(10),
@FirstName NVARCHAR(20),
@LastName NVARCHAR(20),
@Address NVARCHAR(100),
@Country NVARCHAR(20),
@Email NVARCHAR(100),
@Gender NVARCHAR(10),
@BirthDate DATE,
@Answer NVARCHAR(100) output,
@NewPassword NVARCHAR(6) output
)
AS
BEGIN
DECLARE @AlternativeUser NVARCHAR(20)
-- Check username
IF EXISTS (SELECT [User Name] FROM User_Details WHERE [User Name]=@UserName)
	BEGIN
	lABEL: 
	SET @AlternativeUser=@UserName+CONVERT(NVARCHAR(2),[dbo].[fn_RandomNum](11,99))
	IF EXISTS (SELECT [User Name] FROM User_Details WHERE [User Name]=@AlternativeUser)
		GOTO LABEL
		set @Answer = 'The UserName Is already exists. You can choose another UserName: '+@AlternativeUser
		RETURN
	END

-- Check password

IF (@password = lower(@password) COLLATE Latin1_General_BIN)OR (@password = Upper(@password) COLLATE Latin1_General_BIN)OR (@password NOT LIKE '%[0-9]%')
	BEGIN
	set @Answer = 'You need to enter a strong password!'
	exec @NewPassword = dbo.GeneratePassword
	set @NewPassword = (@NewPassword)
	RETURN
	END

IF @Password LIKE '%PASSWORD%'
	BEGIN
	set @Answer = 'Password can not be the word "password"'
	RETURN
	END

IF @Password=@UserName
	BEGIN
	set @Answer = 'Password can not be the same as user name'
	RETURN
	END

-- Check email
IF EXISTS (SELECT [E-Mail] FROM User_Details WHERE [E-Mail]=@Email)
	BEGIN
	set @Answer = 'The E-mail: ' + @Email + ' Is already exists.'
	RETURN
	END

IF @Email not like '%@%.%'
	BEGIN
	set @Answer = 'The email address must be in a legal email address format!'
	RETURN
	END

--Check 18 years old
IF (YEAR(GETDATE())- YEAR(@birthdate))<18
	BEGIN
	set @Answer = 'sorry, You must be abov 18 years old'
	RETURN
	END

--Check country
IF NOT EXISTS (SELECT [Country Name] FROM Country WHERE [Country Name]=@Country)
	BEGIN
	set @Answer = 'Country must be choosed from the list!'
	RETURN
	END

--Check Gender
IF NOT EXISTS (SELECT Gender FROM Gender WHERE Gender=@Gender)
	BEGIN
	set @Answer = 'Gender must be choosed from the list!'
	RETURN
	END

--DML if everything above is OK 
INSERT INTO  User_Details ([User Name],Password,[First Name],[Last Name],Address,Country,[E-Mail],Gender,[Birth Date])
VALUES (@Username, @Password, @FirstName, @LastName, @Address, @Country, @Email, @Gender, @BirthDate)
set @Answer =  '***WELCOME TO CASINO ROYAL***   Get 500$ bonus'
INSERT INTO BankRoll_Trans
VALUES (@@IDENTITY, 'Bonus',GETDATE(), 500)
RETURN
END
GO
PRINT N'Creating Procedure [dbo].[USP_UnBlock]...';


GO


--UnBlock
CREATE PROCEDURE USP_UnBlock
(
@UserId INT
)
AS 
BEGIN
DECLARE @RandPassword NVARCHAR(6)
SET @RandPassword=dbo.GeneratePassword ()
UPDATE User_Details SET password=@RandPassword WHERE UserID=@UserId
UPDATE User_Details SET [Login counter]=0 WHERE UserID=@UserId
PRINT 'Your new password is:'
PRINT @RandPassword
RETURN
END
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[User_Details] WITH CHECK CHECK CONSTRAINT [FK_Country];

ALTER TABLE [dbo].[User_Details] WITH CHECK CHECK CONSTRAINT [FK_Gender];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.BankRoll_Trans'), OBJECT_ID(N'dbo.GameRound'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
